/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package View;

import Model.Aula;
import Model.Docente;
import Service.DocenteService;
import Util.SessaoDocente;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carla Morais
 */

public class ViewVisualizarHorarios extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewVisualizarHorarios
     */
    private Docente docente;
    private Long docenteId;
    public ViewVisualizarHorarios() {
        initComponents();
        CarregarDados();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaHorario = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Horário do dia");

        TabelaHorario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "Nome", "Disciplina", "Sala", "Hora de Início", "Hora de Término"
            }
        ));
        jScrollPane1.setViewportView(TabelaHorario);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void CarregarDados(){
        
        Date data = new Date(); // Você pode modificar a data conforme necessário
        DefaultTableModel modeloTabela = (DefaultTableModel) TabelaHorario.getModel();
        ExibirHorarios(modeloTabela, docenteId, data);
    }
        
     
       private void carregarDocente() {
       Long docenteId = SessaoDocente.getdocenteId();
    if (docenteId != null) {
        DocenteService docenteService = new DocenteService();
        this.docente = docenteService.buscarDocente(docenteId);
        if (this.docente != null) {
            // Exibir ou usar os dados do docente conforme necessário
        }
    } else {
        // Lidar com o caso onde docenteId é nulo, se necessário
    }
    }
    
 public void ExibirHorarios(DefaultTableModel modeloTabela, Long docenteId, Date data) {
     SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        DocenteService docenteService = new DocenteService();
        List<Aula> aulas = docenteService.ListasHorarios(docenteId, data);

      

        if (aulas != null) {
            for (Aula aula : aulas) {
                Object[] dados = {
                    aula.getId(),
                    aula.getNome(), // Adicione o nome da aula, se aplicável
                    aula.getCadeira() != null ? aula.getCadeira().getNome() : "N/A",
                    aula.getSaladeAula() != null ? aula.getSaladeAula().getNomeSala() : "N/A",
                    aula.getHorario() != null ? sdf.format(aula.getHorario().getHoraInicio() ): "N/A",
                    aula.getHorario() != null ?sdf.format( aula.getHorario().getHoraFim()) : "N/A"
                };
                modeloTabela.addRow(dados);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaHorario;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
